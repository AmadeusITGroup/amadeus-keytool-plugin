# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build

on:
  workflow_dispatch:
  push:
  #  branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  semver:
    runs-on: ubuntu-latest
    outputs:
      GITVERSION_SEMVER: ${{ steps.gitversion.outputs.SemVer }}
      GITVERSION_ASSEMBLYSEMVER: "${{ steps.gitversion.outputs.AssemblySemVer }}"
      GITVERSION_MAJORMINORPATCH: "${{ steps.gitversion.outputs.MajorMinorPatch }}"
      GITVERSION_MAJOR: ${{ steps.gitversion.outputs.GITVERSION_MAJOR }}
      GITVERSION_MINOR: ${{ steps.gitversion.outputs.GITVERSION_MINOR }}
      GITVERSION_PATCH: ${{ steps.gitversion.outputs.GITVERSION_PATCH }}
      MACOS_MAJORMINORPATCH: ${{ steps.output1.outputs.MACOS_MAJORMINORPATCH }}
      DEBIAN_PKGVERSION: ${{ steps.output1.outputs.DEBIAN_PKGVERSION }}
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
      
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      
    - id: output1
      run: |
        set -x
        printenv | grep GitVersion_ | sort
        echo "GITVERSION_SEMVER=${GitVersion_SemVer}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_ASSEMBLYSEMVER=${GitVersion_AssemblySemVer}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MAJORMINORPATCH=${GitVersion_MajorMinorPatch}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MAJOR=${GitVersion_Major}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MINOR=${GitVersion_Minor}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_PATCH=${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        echo "DEBIAN_PKGVERSION=${GitVersion_Major}.${GitVersion_Minor}-${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        if [ "${GitVersion_Major}" == "0" ]
        then
          echo "MACOS_MAJORMINORPATCH=1.${GitVersion_Minor}.${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        else
          echo "MACOS_MAJORMINORPATCH=${GitVersion_MajorMinorPatch}" >> "$GITHUB_OUTPUT"
        fi

  build:
    needs: [semver]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'adopt'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
    - name: Build with Maven
      run: |
        mvn versions:set "-DnewVersion=${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        mvn -B package -e --file pom.xml
        
#    - name: Check status
#      run: |
#        set
#        echo -n "Current directory: "
#        pwd
#        find

    - uses: actions/upload-artifact@v4
      with:
        name: Amadeus-Keytool-Plugin
        path: target/amadeus-keytool-plugin-${{ needs.semver.outputs.GITVERSION_SEMVER }}*.jar

    - name: Publish package if we are on main branch
      if: github.ref == 'refs/heads/main'
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mvn --batch-mode -X deploy

  release:
    needs: [semver,build]
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Check status
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./oolitestarter/.git/*"

    - name: Remove old prereleases
      if: github.ref != 'refs/heads/main'
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 6
        delete_tag_pattern: v\d+\.\d+\.\d+-.*
        delete_prerelease_only: 'true'
        #delete_branch: '${{ github.ref_name }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Prerelease
      if: github.ref != 'refs/heads/main'
      id: create_prerelease
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        prerelease: true
        title: "Amadeus Keytool Plugin v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        files: |
          artifacts/Amadeus-Keytool-Plugin/*.*
      
    - name: Remove old releases
      if: github.ref == 'refs/heads/main'
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 4
        delete_tag_pattern: v\d+\.\d+\.\d+
        delete_prerelease_only: 'false'
        #delete_branch: 'main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      id: create_release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        prerelease: false
        title: "Amadeus Keytool Plugin v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        files: |
          artifacts/Amadeus-Keytool-Plugin/*.*
